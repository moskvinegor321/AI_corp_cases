// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum StoryStatus {
  triage
  published
  rejected
}

model Story {
  id            String      @id @default(cuid())
  title         String
  titleSlug     String      @unique
  script        String
  company       String?
  sources       String[]
  status        StoryStatus @default(triage)
  noveltyNote   String?
  confidence    Float?
  origin        String      @default("generated")
  duplicateOfId String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  publishedAt   DateTime?
  sourcePublishedAt DateTime?
  pageId        String?
  page          Page?       @relation(fields: [pageId], references: [id], onDelete: SetNull)
}

model BanTitle {
  id        String   @id @default(cuid())
  title     String
  titleSlug String   @unique
  createdAt DateTime @default(now())
}

model Setting {
  key       String   @id
  value     String
  updatedAt DateTime @updatedAt
}

model Page {
  id           String   @id @default(cuid())
  name         String
  prompt       String?
  searchQuery  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  stories      Story[]
}

// New models for content product

model Pillar {
  id     String  @id @default(cuid())
  name   String  @unique
  posts  Post[]
}

enum PostStatus {
  DRAFT
  NEEDS_REVIEW
  READY_TO_PUBLISH
  PUBLISHED
  REJECTED
}

model Post {
  id           String     @id @default(cuid())
  title        String
  body         String
  status       PostStatus @default(DRAFT)
  topic        String?
  pillarId     String?
  pillar       Pillar?    @relation(fields: [pillarId], references: [id])
  scheduledAt  DateTime?
  publishedAt  DateTime?
  reviewDueAt  DateTime?
  source       String?
  sources      String[]   @default([])
  attachments  Attachment[]
  comments     PostComment[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([pillarId, status])
  @@index([status])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([scheduledAt])
  @@index([publishedAt])
}

model Attachment {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  name      String
  url       String
  mimeType  String?
  sizeBytes Int?
  createdAt DateTime @default(now())
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  DONE
}

model PostComment {
  id         String     @id @default(cuid())
  postId     String
  post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId   String?
  assignee   String?
  text       String
  isTask     Boolean    @default(false)
  taskStatus TaskStatus?
  dueAt      DateTime?
  createdAt  DateTime   @default(now())

  @@index([postId, createdAt])
}
